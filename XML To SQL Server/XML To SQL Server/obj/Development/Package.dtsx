<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="2/24/2022 12:52:11 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-BQC6PN7"
  DTS:CreatorName="DESKTOP-BQC6PN7\Admin"
  DTS:DTSID="{61FB393A-5B34-4955-8311-4C0AEBEC9288}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.180"
  DTS:LocaleID="16393"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="7"
  DTS:VersionGUID="{3F95255B-52BC-4730-A285-DFCBA3115932}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BF1332CD-CA6A-4C34-A84C-2FC7283B66A8}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="XMLFileID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2E2D03A9-3EED-419F-987D-F7EB60A16861}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="XMLFileNameWithPath">
      <DTS:VariableValue
        DTS:DataType="8">D:\Orion eSolutions\SSIS Examples\XML-To-SQL-Server\Source\Sample.XML</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2D71B532-6A9F-4255-9CF6-3E25A456C662}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="XMLFilePath">
      <DTS:VariableValue
        DTS:DataType="8">D:\Orion eSolutions\SSIS Examples\XML-To-SQL-Server\Source</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D930D935-335B-4BF0-87DB-8E1EEB02862D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="XMLFileSpec">
      <DTS:VariableValue
        DTS:DataType="8">*.XML</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DBB81808-0D1E-4953-8F7D-A926B63BF402}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="XMLFrameWork">
      <DTS:VariableValue
        DTS:DataType="11">-1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{581EEC44-F6D4-4F49-8E3F-E7ADB00929E9}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="XMLSQLDatabase">
      <DTS:VariableValue
        DTS:DataType="8">OrionDB</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EEA69F67-F919-417B-A6B9-D7B7628B1E30}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="XMLSQLServer">
      <DTS:VariableValue
        DTS:DataType="8">DESKTOP-BQC6PN7\MSSQLSERVERDEV</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BD6E55C9-FE3B-4EA6-A3C4-DD6041ACC61F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="XMLTablePrefix">
      <DTS:VariableValue
        DTS:DataType="8">Orion_</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Loop XML Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{1D32CDF8-3860-4B27-9F94-C7938044000F}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Loop XML Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachFileEnumerator"
        DTS:DTSID="{F0C394FA-6D27-4766-BA0B-81638F8098CC}"
        DTS:ObjectName="{F0C394FA-6D27-4766-BA0B-81638F8098CC}">
        <DTS:ObjectData>
          <ForEachFileEnumeratorProperties>
            <FEFEProperty
              Folder="D:\Orion eSolutions\SSIS Examples\XML-To-SQL-Server\Source" />
            <FEFEProperty
              FileSpec="*.XML" />
            <FEFEProperty
              FileNameRetrievalType="0" />
            <FEFEProperty
              Recurse="-1" />
          </ForEachFileEnumeratorProperties>
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Loop XML Container\Load XML Data Into Table"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{3EA49363-8B2E-4CE3-B04F-2329333F43BC}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Load XML Data Into Table"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_8d1fb7ba1cd340fb98460c20ace5f82b"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::XMLFileID,User::XMLFileNameWithPath,User::XMLFilePath,User::XMLFileSpec,User::XMLFrameWork,User::XMLSQLDatabase,User::XMLSQLServer,User::XMLTablePrefix">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_8d1fb7ba1cd340fb98460c20ace5f82b.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{72854B1C-1338-47BF-AD36-7D421905C086}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_8d1fb7ba1cd340fb98460c20ace5f82b</RootNamespace>
    <AssemblyName>ST_8d1fb7ba1cd340fb98460c20ace5f82b</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
#endregion

namespace ST_8d1fb7ba1cd340fb98460c20ace5f82b
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 

        SqlConnection SQLConn;
        SqlCommand cmd;

        public void Main()
        {
            try
            {
                String XMLFileNameWithPath;
                Boolean XMLFrameWork;
                String XMLTablePrefix;

                String SQL = "";
                String InsertSQL = "";
                String ErrorSQL = "";
                String CreateTableSQL = "";
                String AlterTableSQL = "";

                String DBTableName;
                String DBColumnNames;
                String DBColumnDataType;

                String XMLFileID;
                DataSet XMLDataset;
                DataTable XMLDataTable;
                String XMLColumnDataType;
                String XMLColumnName;

                String ParentTableName = "";
                String ParentColumnName = "";
                String ChildTableName = "";
                String ChildColumnName = "";

                DateTime XMLLoadDateTime;


                String SPPConnString;

                String XMLSQLServer;
                String XMLDatabase;

                XMLSQLServer = Dts.Variables["XMLSQLServer"].Value.ToString();
                XMLDatabase = Dts.Variables["XMLSQLDatabase"].Value.ToString();

                SPPConnString = "Server=" + XMLSQLServer + "; Database=" + XMLDatabase + ";Trusted_Connection=True;";

                SQLConn = new SqlConnection();
                SQLConn.ConnectionString = SPPConnString;
                SQLConn.Open();

                XMLFileNameWithPath = Dts.Variables["XMLFileNameWithPath"].Value.ToString();
                XMLFileID = Dts.Variables["XMLFileID"].Value.ToString();
                XMLFrameWork = (Boolean)Dts.Variables["XMLFrameWork"].Value;
                XMLTablePrefix = Dts.Variables["XMLTablePrefix"].Value.ToString();

                if (XMLFrameWork)
                {
                    SQL = "GenerateXMLFileID";
                    cmd = new SqlCommand(SQL, SQLConn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@XMLFileNameWithPath", XMLFileNameWithPath);
                    //cmd.Parameters[0].Value = XMLFileNameWithPath;
                    XMLFileID = (String)cmd.ExecuteScalar();
                    cmd = null;
                }
                XMLLoadDateTime = DateTime.Now;

                XMLDataset = new DataSet();
                XMLDataset.ReadXml(XMLFileNameWithPath);

                for (int XMLTableCount = 0; XMLTableCount <= XMLDataset.Tables.Count - 1; XMLTableCount++)
                {
                    XMLDataTable = XMLDataset.Tables[XMLTableCount];

                    if (XMLFrameWork)
                    {
                        /* Get table Relationships */
                        InsertSQL = "INSERT INTO DBO.[XMLTableRelationship](XMLFileID, ParentTableName, ParentColumnName, ChildTableName, ChildColumnName)";
                        if (XMLDataTable.ParentRelations.Count > 0)
                        {
                            foreach (DataRelation dr in XMLDataTable.ParentRelations)
                            {
                                ParentTableName = dr.ParentTable.TableName;
                                ParentColumnName = "";
                                foreach (DataColumn dc in dr.ParentColumns)
                                {
                                    ParentColumnName = ParentColumnName + dc.ColumnName + ",";
                                }
                                ParentColumnName = ParentColumnName.Substring(0, ParentColumnName.Length - 1);

                                ChildTableName = dr.ChildTable.TableName;
                                ChildColumnName = "";
                                foreach (DataColumn dc in dr.ChildColumns)
                                {
                                    ChildColumnName = ChildColumnName + dc.ColumnName + ",";
                                }
                                ChildColumnName = ChildColumnName.Substring(0, ChildColumnName.Length - 1);

                                InsertSQL = InsertSQL + Environment.NewLine + " SELECT ";
                                InsertSQL = InsertSQL + "'" + XMLFileID + "',";
                                InsertSQL = InsertSQL + "'" + ParentTableName + "',";
                                InsertSQL = InsertSQL + "'" + ParentColumnName + "',";
                                InsertSQL = InsertSQL + "'" + ChildTableName + "',";
                                InsertSQL = InsertSQL + "'" + ChildColumnName + "'";

                                cmd = new SqlCommand(InsertSQL, SQLConn);
                                cmd.ExecuteNonQuery();
                                cmd = null;
                            }

                        }
                        else
                        {
                            ParentTableName = "";
                            ParentColumnName = "";
                            ChildTableName = XMLDataTable.TableName;
                            ChildColumnName = "";

                            InsertSQL = InsertSQL + Environment.NewLine + " SELECT ";
                            InsertSQL = InsertSQL + "'" + XMLFileID + "',";
                            InsertSQL = InsertSQL + "'" + ParentTableName + "',";
                            InsertSQL = InsertSQL + "'" + ParentColumnName + "',";
                            InsertSQL = InsertSQL + "'" + ChildTableName + "',";
                            InsertSQL = InsertSQL + "'" + ChildColumnName + "'";

                            cmd = new SqlCommand(InsertSQL, SQLConn);
                            cmd.ExecuteNonQuery();
                            cmd = null;
                        }

                    }
                    /* Load Data */

                    DBTableName = XMLTablePrefix + XMLDataset.Tables[XMLTableCount].TableName.ToString();

                    SQL = "SELECT ISNULL((SELECT '#' + SC.NAME  FROM SYS.OBJECTS SO JOIN SYS.COLUMNS SC ON SO.object_id = SC.object_id WHERE SO.TYPE = 'U' AND SO.NAME = '" + DBTableName + "' ORDER BY SC.NAME For XML PATH ('') ) + '#','')";

                    cmd = new SqlCommand(SQL, SQLConn);
                    DBColumnNames = (String)cmd.ExecuteScalar();
                    cmd = null;

                    if (XMLFrameWork)
                    {
                        if (DBColumnNames.IndexOf("#XMLFileID#") < 0 && DBColumnNames.Length > 0)
                        {
                            AlterTableSQL = "ALTER TABLE DBO." + DBTableName + " ADD " + "[XMLFileID]  int ";
                            cmd = new SqlCommand(AlterTableSQL, SQLConn);
                            cmd.ExecuteNonQuery();
                            cmd = null;
                        }
                        else
                        {
                            CreateTableSQL = "CREATE TABLE DBO." + DBTableName + Environment.NewLine + "( XMLFileID int,";
                        }
                    }
                    else
                    {
                        if (DBColumnNames.IndexOf("#XMLFileNameWithPath#") < 0 && DBColumnNames.Length > 0)
                        {
                            AlterTableSQL = "ALTER TABLE DBO." + DBTableName + " ADD " + "[XMLFileNameWithPath]  nvarchar(max), XMLLoadDateTime DateTime ";
                            cmd = new SqlCommand(AlterTableSQL, SQLConn);
                            cmd.ExecuteNonQuery();
                            cmd = null;
                        }
                        else
                        {
                            CreateTableSQL = "CREATE TABLE DBO." + DBTableName + Environment.NewLine + "( XMLFileNameWithPath nvarchar(max), XMLLoadDateTime DateTime,";
                        }

                    }

                    InsertSQL = "INSERT INTO DBO." + DBTableName + Environment.NewLine + "(";

                    for (int XMLColCount = 0; XMLColCount <= XMLDataTable.Columns.Count - 1; XMLColCount++)
                    {
                        XMLColumnName = XMLDataTable.Columns[XMLColCount].ColumnName;
                        InsertSQL = InsertSQL + "[" + XMLColumnName + "],";

                        if (DBColumnNames == "" || DBColumnNames.IndexOf("#" + XMLColumnName + "#") < 0)
                        {
                            XMLColumnDataType = XMLDataTable.Columns[XMLColCount].DataType.ToString().ToUpper();

                            if (XMLColumnDataType == "SYSTEM.INT16")
                            {
                                DBColumnDataType = "smallint";
                            }
                            else if (XMLColumnDataType == "SYSTEM.INT32")
                            {
                                DBColumnDataType = "int";
                            }
                            else if (XMLColumnDataType == "SYSTEM.INT64")
                            {
                                DBColumnDataType = "bigint";
                            }
                            else if (XMLColumnDataType == "SYSTEM.DATETIME")
                            {
                                DBColumnDataType = "datetime";
                            }
                            else if (XMLColumnDataType == "SYSTEM.STRING")
                            {
                                DBColumnDataType = "nvarchar(max)";
                            }
                            else if (XMLColumnDataType == "SYSTEM.SINGLE")
                            {
                                DBColumnDataType = "single";
                            }
                            else if (XMLColumnDataType == "SYSTEM.DOUBLE")
                            {
                                DBColumnDataType = "double";
                            }
                            else if (XMLColumnDataType == "SYSTEM.DECIMAL")
                            {
                                DBColumnDataType = "decimal(18, 6)";
                            }
                            else
                            {
                                DBColumnDataType = "nvarchar(max)";
                            };

                            if (DBColumnNames == "")
                            {
                                CreateTableSQL = CreateTableSQL + "[" + XMLColumnName + "]   " + DBColumnDataType + ",";
                            }
                            else
                            {
                                AlterTableSQL = "ALTER TABLE DBO." + DBTableName + " ADD " + "[" + XMLColumnName + "]   " + DBColumnDataType;
                                cmd = new SqlCommand(AlterTableSQL, SQLConn);
                                cmd.ExecuteNonQuery();
                                cmd = null;
                            }
                        }
                    }

                    if (DBColumnNames == "")
                    {
                        CreateTableSQL = CreateTableSQL.Substring(0, CreateTableSQL.Length - 1) + ")";
                        cmd = new SqlCommand(CreateTableSQL, SQLConn);
                        cmd.ExecuteNonQuery();
                        cmd = null;
                    }

                    if (XMLFrameWork)
                    {
                        InsertSQL = InsertSQL + "[XMLFileID])";
                    }
                    else
                    {
                        InsertSQL = InsertSQL + "[XMLFileNameWithPath],XMLLoadDateTime)";
                    }

                    foreach (DataRow XMLDataRow in XMLDataTable.Rows)
                    {
                        SQL = InsertSQL + Environment.NewLine + " SELECT ";
                        for (int XMLColCount = 0; XMLColCount <= XMLDataTable.Columns.Count - 1; XMLColCount++)
                        {
                            SQL = SQL + "'" + XMLDataRow[XMLDataTable.Columns[XMLColCount].ColumnName].ToString().Replace("'", "''") + "',";
                        }

                        if (XMLFrameWork)
                        {
                            SQL = SQL + "'" + XMLFileID + "'";
                        }
                        else
                        {
                            SQL = SQL + "'" + XMLFileNameWithPath + "','" + XMLLoadDateTime.ToString() + "'";
                        }

                        try
                        {
                            cmd = new SqlCommand(SQL, SQLConn);
                            cmd.ExecuteNonQuery();
                            cmd = null;
                        }
                        catch
                        {
                            if (XMLFrameWork)
                            {
                                ErrorSQL = "INSERT INTO DBO.XMLErrorLog" + Environment.NewLine;
                                ErrorSQL = ErrorSQL + "([XMLFileID], [SQLStatement], [ErrorDateTime], [XMLTableName])";
                                ErrorSQL = ErrorSQL + "SELECT '" + XMLFileID + "','" + SQL.Replace("'", "''") + "',GETDATE(),'" + DBTableName + "'";
                                cmd = new SqlCommand(ErrorSQL, SQLConn);
                                cmd.ExecuteNonQuery();
                                cmd = null;
                            }
                            else
                            {
                                Dts.Events.FireError(-1, "XMLLoad", "Error in inserting the following data from XML File" + Environment.NewLine + SQL, String.Empty, 0);
                                Dts.TaskResult = (int)ScriptResults.Failure;
                                SQLConn.Close();
                                SQLConn.Dispose();
                            }
                        }
                    }



                }

                SQLConn.Close();
                SQLConn.Dispose();

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception e)
            {
                //SqlConn = null;
                Dts.Events.FireError(-1, "XMLLoad", e.Message, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:Language>msBuild</msb:Language>
    <msb:CodeName>ST_8d1fb7ba1cd340fb98460c20ace5f82b</msb:CodeName>
    <msb:DisplayName>ST_8d1fb7ba1cd340fb98460c20ace5f82b</msb:DisplayName>
    <msb:ProjectId>{E592CE71-E057-4388-AC6D-45319171817E}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_8d1fb7ba1cd340fb98460c20ace5f82b.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_8d1fb7ba1cd340fb98460c20ace5f82b.Properties.Settings.get_Default():ST_8d1fb7ba1cd340fb98460c20ace5f82b.Properties.Sett" +
    "ings")]

namespace ST_8d1fb7ba1cd340fb98460c20ace5f82b.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_8d1fb7ba1cd340fb98460c20ace5f82b")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_8d1fb7ba1cd340fb98460c20ace5f82b")]
[assembly: AssemblyCopyright("Copyright @  2022")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_8d1fb7ba1cd340fb98460c20ace5f82b.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_8d1fb7ba1cd340fb98460c20ace5f82b.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_8d1fb7ba1cd340fb98460c20ace5f82b.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_8d1fb7ba1cd340fb98460c20ace5f82b.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_8d1fb7ba1cd340fb98460c20ace5f82b.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_8d1fb7ba1cd340fb98460c20ace5f82b.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAOI7F2IAAAAAAAAAAOAAIiALATAAACgAAAAIAAAAAAAA8kcA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAKBHAABPAAAAAGAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA+CcAAAAgAAAAKAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAYAAAAAYAAAAqAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAMAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADU
RwAAAAAAAEgAAAACAAUA2CsAABAbAAABAAAAAAAAAOhGAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBgCwCgAAAQAAEXIBAABwDXIBAABwEwRyAQAAcBMFcgEA
AHATBnIBAABwEwdyAQAAcBMQcgEAAHATEXIBAABwExJyAQAAcBMTAigQAAAKbxEAAApyAwAAcG8S
AAAKbxMAAApvFAAAChMWAigQAAAKbxEAAApyHQAAcG8SAAAKbxMAAApvFAAAChMXG40mAAABJRZy
OwAAcKIlFxEWoiUYcksAAHCiJRkRF6IlGnJjAABwoigVAAAKExUCcxYAAAp9AQAABAJ7AQAABBEV
bxcAAAoCewEAAARvGAAACgIoEAAACm8RAAAKcpcAAHBvEgAACm8TAAAKbxQAAAoKAigQAAAKbxEA
AApyvwAAcG8SAAAKbxMAAApvFAAAChMLAigQAAAKbxEAAApy0wAAcG8SAAAKbxMAAAqlKAAAAQsC
KBAAAApvEQAACnLtAABwbxIAAApvEwAACm8UAAAKDAcsVHILAQBwDQIJAnsBAAAEcxkAAAp9AgAA
BAJ7AgAABBpvGgAACgJ7AgAABG8bAAAKci8BAHAGbxwAAAomAnsCAAAEbx0AAAp0JgAAARMLAhR9
AgAABCgeAAAKExRzHwAAChMMEQwGbyAAAAomFhMYOHkIAAARDG8hAAAKERhvIgAAChMNBzmCAgAA
clkBAHATBBENbyMAAApvJAAAChY+qQEAABENbyMAAApvJQAAChMZOHABAAARGW8mAAAKdBUAAAET
GhEabycAAApvKAAAChMQcgEAAHATEREabykAAAoTGxYTHCsiERsRHJoTHRERER1vKgAACnJGAgBw
KCsAAAoTEREcF1gTHBEcERuOaTLWEREWERFvLAAAChdZby0AAAoTEREaby4AAApvKAAAChMScgEA
AHATExEaby8AAAoTGxYTHCsiERsRHJoTHhETER5vKgAACnJGAgBwKCsAAAoTExEcF1gTHBEcERuO
aTLWERMWERNvLAAAChdZby0AAAoTExEEKDAAAApySgIAcCgrAAAKEwQRBHJcAgBwEQtyYAIAcCgx
AAAKEwQRBHJcAgBwERByYAIAcCgxAAAKEwQRBHJcAgBwERFyYAIAcCgxAAAKEwQRBHJcAgBwERJy
YAIAcCgxAAAKEwQRBHJcAgBwERNyXAIAcCgxAAAKEwQCEQQCewEAAARzGQAACn0CAAAEAnsCAAAE
bzIAAAomAhR9AgAABBEZbzMAAAo6hP7//93VAAAAERl1FwAAARMfER8sBxEfbzQAAArccgEAAHAT
EHIBAABwExERDW8oAAAKExJyAQAAcBMTEQQoMAAACnJKAgBwKCsAAAoTBBEEclwCAHARC3JgAgBw
KDEAAAoTBBEEclwCAHAREHJgAgBwKDEAAAoTBBEEclwCAHAREXJgAgBwKDEAAAoTBBEEclwCAHAR
EnJgAgBwKDEAAAoTBBEEclwCAHARE3JcAgBwKDEAAAoTBAIRBAJ7AQAABHMZAAAKfQIAAAQCewIA
AARvMgAACiYCFH0CAAAECBEMbyEAAAoRGG8iAAAKbygAAApvFAAACig1AAAKEwhyZgIAcBEIcocD
AHAoKwAACg0CCQJ7AQAABHMZAAAKfQIAAAQCewIAAARvHQAACnQmAAABEwkCFH0CAAAEByxxEQly
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
rQChAGoIYQCpAMwAsgCRABUBZQCpAJMHtwCxACMBZQAxAQ0IvQAxASYEqQAxARwExACpAL0AsgCp
AIIHtwCJAVsBygAxAQ0IzgBJAaYIqQChAIAI1gC5AAkCBgAxAQ0I2gAxAdwD4ACRAHYH5QCRAdEE
6wAxAbYI8QCxAGcB9wAxATUGZQCRAAQI/QDBANEEAwExAYMACAGZABMEZQAZAfkHDgExAcIIFAGp
AV4GFwEZAS8IAQA5AQMCBgCxAQkCBgDJAKcAZQBxAIIGBgDRAIIGBgCZAQMBIAGZAZkIKQHpAIIG
LwEJAYIGBgAIABwASQEIACAATgEpAHMAvgEuAAsAlgEuABMAnwEuABsAvgEuACMAxwEuACsA8AEu
ADMA8AEuADsA8AEuAEMAxwEuAEsA9gEuAFMA8AEuAFsADQJDAGMATgFJAHMAvgFjAGsATgGhAHsA
TgEbAAMAAQAEAAMAAAAlBocBAACsAYwBAAAnCJEBAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAA
AAEAAACaH11fAAAAAAAAPQAAAAQAAAAAAAAAAAAAADcBYQAAAAAADwAAAAAAAAAAAAAAQAExBAAA
AAAEAAAAAAAAAAAAAAA3ATEAAAAAAAQAAAAAAAAAAAAAADcB2gQAAAAADwAAAAAAAAAAAAAAQAEK
AAAAAAAAAAAAAQAAANMGAAAFAAIAAAAAPE1vZHVsZT4ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5h
Z2VkRFRTAHZhbHVlX18AU3lzdGVtLkRhdGEAU1RfOGQxZmI3YmExY2QzNDBmYjk4NDYwYzIwYWNl
NWY4MmIAbXNjb3JsaWIAY21kAERiQ29tbWFuZABTcWxDb21tYW5kAFJlcGxhY2UAZGVmYXVsdElu
c3RhbmNlAFhtbFJlYWRNb2RlAGdldF9NZXNzYWdlAERhdGFUYWJsZQBnZXRfQ2hpbGRUYWJsZQBn
ZXRfUGFyZW50VGFibGUAVmFyaWFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0
VHlwZUZyb21IYW5kbGUAZ2V0X1RhYmxlTmFtZQBnZXRfQ29sdW1uTmFtZQBEYXRlVGltZQBNaWNy
b3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAGdldF9OZXdMaW5lAGdldF9EYXRhVHlwZQBzZXRf
Q29tbWFuZFR5cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1
cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNl
AEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3Rh
dGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0
ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRp
dGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0
dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlv
bkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVj
dEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5
UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmls
aXR5QXR0cmlidXRlAGdldF9WYWx1ZQBBZGRXaXRoVmFsdWUAdmFsdWUASW5kZXhPZgBTeXN0ZW0u
UnVudGltZS5WZXJzaW9uaW5nAHNldF9Db25uZWN0aW9uU3RyaW5nAFRvU3RyaW5nAFN1YnN0cmlu
ZwBnZXRfTGVuZ3RoAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3Fs
U2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21w
b25lbnRNb2RlbABTVF84ZDFmYjdiYTFjZDM0MGZiOTg0NjBjMjBhY2U1ZjgyYi5kbGwAUmVhZFht
bABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBCb29sZWFuAE9wZW4AU2NyaXB0TWFp
bgBEYXRhQ29sdW1uAFNRTENvbm4ARGF0YVJlbGF0aW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5
c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAERhdGFUYWJsZUNvbGxlY3Rpb24A
RGF0YUNvbHVtbkNvbGxlY3Rpb24ARGF0YVJlbGF0aW9uQ29sbGVjdGlvbgBTcWxQYXJhbWV0ZXJD
b2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAERiQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAEV4
Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8ARXhlY3V0ZVNjYWxhcgBnZXRf
UmVzb3VyY2VNYW5hZ2VyAFRvVXBwZXIARXZlbnRzT2JqZWN0V3JhcHBlcgBTcWxQYXJhbWV0ZXIA
RmlyZUVycm9yAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5E
aWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJj
ZXMAU1RfOGQxZmI3YmExY2QzNDBmYjk4NDYwYzIwYWNlNWY4MmIuUHJvcGVydGllcy5SZXNvdXJj
ZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzhkMWZiN2JhMWNkMzQwZmI5ODQ2MGMyMGFj
ZTVmODJiLlByb3BlcnRpZXMAZ2V0X1RhYmxlcwBnZXRfVmFyaWFibGVzAFNldHRpbmdzAGdldF9D
b2x1bW5zAGdldF9DaGlsZENvbHVtbnMAZ2V0X1BhcmVudENvbHVtbnMAZ2V0X1BhcmVudFJlbGF0
aW9ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X1BhcmFtZXRlcnMAU3VjY2VzcwBnZXRfRHRzAFNj
cmlwdFJlc3VsdHMAZ2V0X0V2ZW50cwBnZXRfUm93cwBDb25jYXQAT2JqZWN0AERhdGFTZXQAZ2V0
X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AEVudmlyb25tZW50
AENvbXBvbmVudABnZXRfQ3VycmVudABnZXRfQ291bnQATW92ZU5leHQAZ2V0X05vdwBEYXRhUm93
AGdldF9Bc3NlbWJseQBFeGVjdXRlTm9uUXVlcnkAb3BfRXF1YWxpdHkARW1wdHkAAAEAGVgATQBM
AFMAUQBMAFMAZQByAHYAZQByAAAdWABNAEwAUwBRAEwARABhAHQAYQBiAGEAcwBlAAAPUwBlAHIA
dgBlAHIAPQAAFzsAIABEAGEAdABhAGIAYQBzAGUAPQAAMzsAVAByAHUAcwB0AGUAZABfAEMAbwBu
AG4AZQBjAHQAaQBvAG4APQBUAHIAdQBlADsAACdYAE0ATABGAGkAbABlAE4AYQBtAGUAVwBpAHQA
aABQAGEAdABoAAATWABNAEwARgBpAGwAZQBJAEQAABlYAE0ATABGAHIAYQBtAGUAVwBvAHIAawAA
HVgATQBMAFQAYQBiAGwAZQBQAHIAZQBmAGkAeAAAI0cAZQBuAGUAcgBhAHQAZQBYAE0ATABGAGkA
bABlAEkARAAAKUAAWABNAEwARgBpAGwAZQBOAGEAbQBlAFcAaQB0AGgAUABhAHQAaAAAgOtJAE4A
UwBFAFIAVAAgAEkATgBUAE8AIABEAEIATwAuAFsAWABNAEwAVABhAGIAbABlAFIAZQBsAGEAdABp
AG8AbgBzAGgAaQBwAF0AKABYAE0ATABGAGkAbABlAEkARAAsACAAUABhAHIAZQBuAHQAVABhAGIA
bABlAE4AYQBtAGUALAAgAFAAYQByAGUAbgB0AEMAbwBsAHUAbQBuAE4AYQBtAGUALAAgAEMAaABp
AGwAZABUAGEAYgBsAGUATgBhAG0AZQAsACAAQwBoAGkAbABkAEMAbwBsAHUAbQBuAE4AYQBtAGUA
KQAAAywAABEgAFMARQBMAEUAQwBUACAAAAMnAAEFJwAsAAGBH1MARQBMAEUAQwBUACAASQBTAE4A
VQBMAEwAKAAoAFMARQBMAEUAQwBUACAAJwAjACcAIAArACAAUwBDAC4ATgBBAE0ARQAgACAARgBS
AE8ATQAgAFMAWQBTAC4ATwBCAEoARQBDAFQAUwAgAFMATwAgAEoATwBJAE4AIABTAFkAUwAuAEMA
TwBMAFUATQBOAFMAIABTAEMAIABPAE4AIABTAE8ALgBvAGIAagBlAGMAdABfAGkAZAAgAD0AIABT
AEMALgBvAGIAagBlAGMAdABfAGkAZAAgAFcASABFAFIARQAgAFMATwAuAFQAWQBQAEUAIAA9ACAA
JwBVACcAIABBAE4ARAAgAFMATwAuAE4AQQBNAEUAIAA9ACAAJwABYScAIABPAFIARABFAFIAIABC
AFkAIABTAEMALgBOAEEATQBFACAARgBvAHIAIABYAE0ATAAgAFAAQQBUAEgAIAAoACcAJwApACAA
KQAgACsAIAAnACMAJwAsACcAJwApAAEXIwBYAE0ATABGAGkAbABlAEkARAAjAAAhQQBMAFQARQBS
ACAAVABBAEIATABFACAARABCAE8ALgAALSAAQQBEAEQAIABbAFgATQBMAEYAaQBsAGUASQBEAF0A
IAAgAGkAbgB0ACAAACNDAFIARQBBAFQARQAgAFQAQQBCAEwARQAgAEQAQgBPAC4AACEoACAAWABN
AEwARgBpAGwAZQBJAEQAIABpAG4AdAAsAAArIwBYAE0ATABGAGkAbABlAE4AYQBtAGUAVwBpAHQA
aABQAGEAdABoACMAAICJIABBAEQARAAgAFsAWABNAEwARgBpAGwAZQBOAGEAbQBlAFcAaQB0AGgA
UABhAHQAaABdACAAIABuAHYAYQByAGMAaABhAHIAKABtAGEAeAApACwAIABYAE0ATABMAG8AYQBk
AEQAYQB0AGUAVABpAG0AZQAgAEQAYQB0AGUAVABpAG0AZQAgAAB9KAAgAFgATQBMAEYAaQBsAGUA
TgBhAG0AZQBXAGkAdABoAFAAYQB0AGgAIABuAHYAYQByAGMAaABhAHIAKABtAGEAeAApACwAIABY
AE0ATABMAG8AYQBkAEQAYQB0AGUAVABpAG0AZQAgAEQAYQB0AGUAVABpAG0AZQAsAAAhSQBOAFMA
RQBSAFQAIABJAE4AVABPACAARABCAE8ALgAAAygAAANbAAAFXQAsAAADIwAAGVMAWQBTAFQARQBN
AC4ASQBOAFQAMQA2AAARcwBtAGEAbABsAGkAbgB0AAAZUwBZAFMAVABFAE0ALgBJAE4AVAAzADIA
AAdpAG4AdAAAGVMAWQBTAFQARQBNAC4ASQBOAFQANgA0AAANYgBpAGcAaQBuAHQAAB9TAFkAUwBU
AEUATQAuAEQAQQBUAEUAVABJAE0ARQAAEWQAYQB0AGUAdABpAG0AZQAAG1MAWQBTAFQARQBNAC4A
UwBUAFIASQBOAEcAABtuAHYAYQByAGMAaABhAHIAKABtAGEAeAApAAAbUwBZAFMAVABFAE0ALgBT
AEkATgBHAEwARQAADXMAaQBuAGcAbABlAAAbUwBZAFMAVABFAE0ALgBEAE8AVQBCAEwARQAADWQA
bwB1AGIAbABlAAAdUwBZAFMAVABFAE0ALgBEAEUAQwBJAE0AQQBMAAAdZABlAGMAaQBtAGEAbAAo
ADEAOAAsACAANgApAAAJXQAgACAAIAAADSAAQQBEAEQAIABbAAADKQAAGVsAWABNAEwARgBpAGwA
ZQBJAEQAXQApAABNWwBYAE0ATABGAGkAbABlAE4AYQBtAGUAVwBpAHQAaABQAGEAdABoAF0ALABY
AE0ATABMAG8AYQBkAEQAYQB0AGUAVABpAG0AZQApAAAFJwAnAAEHJwAsACcAATdJAE4AUwBFAFIA
VAAgAEkATgBUAE8AIABEAEIATwAuAFgATQBMAEUAcgByAG8AcgBMAG8AZwAAfSgAWwBYAE0ATABG
AGkAbABlAEkARABdACwAIABbAFMAUQBMAFMAdABhAHQAZQBtAGUAbgB0AF0ALAAgAFsARQByAHIA
bwByAEQAYQB0AGUAVABpAG0AZQBdACwAIABbAFgATQBMAFQAYQBiAGwAZQBOAGEAbQBlAF0AKQAA
EVMARQBMAEUAQwBUACAAJwABGycALABHAEUAVABEAEEAVABFACgAKQAsACcAAQ9YAE0ATABMAG8A
YQBkAABnRQByAHIAbwByACAAaQBuACAAaQBuAHMAZQByAHQAaQBuAGcAIAB0AGgAZQAgAGYAbwBs
AGwAbwB3AGkAbgBnACAAZABhAHQAYQAgAGYAcgBvAG0AIABYAE0ATAAgAEYAaQBsAGUAAHFTAFQA
XwA4AGQAMQBmAGIANwBiAGEAMQBjAGQAMwA0ADAAZgBiADkAOAA0ADYAMABjADIAMABhAGMAZQA1
AGYAOAAyAGIALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAO5VoYrX
J0NKk+0USE+c2YwABCABAQgDIAABBSABARERBCABAQ4FIAEBEX0yByQOAg4ODg4ODg4ODg4SRRJJ
Dg4ODg4OEU0ODg4IElESVR0SWQgSWRJZEl0IEmEIEmUFIAASgI0FIAASgJEGIAESgJUcAyAAHAMg
AA4FAAEOHQ4GIAIBDhI9BiABARGAqQUgABKArQcgAhKAsQ4cBAAAEU0GIAERgLUOBSAAEoC5BSAB
EkkIBSAAEoC9AyAACAQgABJRBCAAEkkFIAAdElkGAAMODg4OBSACDggIAwAADgcABA4ODg4OAyAA
AgUAAg4ODgQgAQgOBSAAEoDJBSABElkIBQACAg4OBSAAEoDNBSAAEoDRBCABHA4FIAIODg4FIAAS
gNUCBg4IIAUCCA4ODggIAAESgM0RgN0FIAASgOEHIAIBDhKA4Qi3elxWGTTgiQiJhF3NgIDMkQQA
AAAABAEAAAADBhI9AwYSQQMGEnUDBhJ5AwYSEAIGCAMGERQEAAASdQQAABJ5BQABARJ5BAAAEhAD
AAABBAgAEnUECAASeQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dz
AQgBAAIAAAAAACgBACNTVF84ZDFmYjdiYTFjZDM0MGZiOTg0NjBjMjBhY2U1ZjgyYgAABQEAAAAA
FgEAEUNvcHlyaWdodCBAICAyMDIyAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjcBAFQO
FEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNwC0AAAAzsrvvgEAAACRAAAA
bFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4w
LjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0
ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAyEcA
AAAAAAAAAAAA4kcAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAANRHAAAAAAAAAAAAAAAAX0NvckRs
bE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAY
AACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAABoE
AAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAAB
AAAAAQBdX5ofAAABAF1fmh8/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIA
RgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAR6
AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABiADAA
AAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBl
AAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADgA
ZAAxAGYAYgA3AGIAYQAxAGMAZAAzADQAMABmAGIAOQA4ADQANgAwAGMAMgAwAGEAYwBlADUAZgA4
ADIAYgAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA4ADAAOQAwAC4A
MgA0ADQAMQAzAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADgAZAAx
AGYAYgA3AGIAYQAxAGMAZAAzADQAMABmAGIAOQA4ADQANgAwAGMAMgAwAGEAYwBlADUAZgA4ADIA
YgAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQBy
AGkAZwBoAHQAIABAACAAIAAyADAAMgAyAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEA
cgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBU
AF8AOABkADEAZgBiADcAYgBhADEAYwBkADMANAAwAGYAYgA5ADgANAA2ADAAYwAyADAAYQBjAGUA
NQBmADgAMgBiAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABf
ADgAZAAxAGYAYgA3AGIAYQAxAGMAZAAzADQAMABmAGIAOQA4ADQANgAwAGMAMgAwAGEAYwBlADUA
ZgA4ADIAYgAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOAAw
ADkAMAAuADIANAA0ADEAMwAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8A
bgAAADEALgAwAC4AOAAwADkAMAAuADIANAA0ADEAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAAD0NwAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{34999667-6F73-4F01-857A-9FCD03264839}"
          DTS:ObjectName="{34999667-6F73-4F01-857A-9FCD03264839}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::XMLFileNameWithPath" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="207,42"
          Id="Package\Loop XML Container\Load XML Data Into Table"
          TopLeft="93,50" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="378,166"
          Size="378,209"
          Id="Package\Loop XML Container"
          TopLeft="229,94" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>